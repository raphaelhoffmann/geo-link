deepdive {

  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 -c 0"

  schema.variables {
    locations.is_correct: Boolean
  }

  pipeline.run: all 

  pipeline.pipelines {
    all = [ extract_pairs, pairs_features, one_of_n_features, consecutive_in_same_country ]
  }

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
    # start gpfdist server on the machine running the application with
    # `rungpcommand 'gpfdist -d /lfs/raiders4/0/rionda/greenplum_gpfdist-memex -p 9999'`
  }

  calibration.holdout_fraction: 0.075

  extraction.extractors {

    extract_pairs: {
        style: tsv_extractor
        before: psql -h ${PGHOST} -p ${PGPORT} -d ${DBNAME} -f ${APP_HOME}/schemas/locations.sql
        input: """
                SELECT
                        sent_id,
                        words,
                        poses
                FROM sentences;
                """
        output_relation: locations
        udf: ${APP_HOME}/udf/extract_pairs.py
    }

  }
  
  inference.factors {

    pairs_features {
      input_query = """
        SELECT l.id as "locations.id", l.is_correct as "locations.is_correct", unnest(l.features) as "locations.feature"
        FROM locations l;
           """
      function: "IsTrue(locations.is_correct)"
      weight: "?(locations.feature)"
    }

    one_of_n_features {
      input_query = """
        SELECT l1.id as "linking1.id", l1.is_correct as "linking1.is_correct",
               l2.id as "linking2.id", l2.is_correct as "linking2.is_correct"
        FROM locations l1, locations l2
        WHERE l1.sent_id = l2.sent_id 
        AND l1.mention_num = l2.mention_num
        AND NOT l1.mention_id = l2.mention_id;
         """
      function: "And(linking1.is_correct, linking2.is_correct)"
      weight: -10
    }

    consecutive_in_same_country { 
      input_query: """
        SELECT l1.id as "linking1.id", l1.is_correct as "linking1.is_correct",
               l2.id as "linking2.id", l2.is_correct as "linking2.is_correct"
        FROM locations l1, locations l2, 
             cities1000 c1, cities1000 c2
        WHERE l1.loc_id = c1.geonameid
        AND l2.loc_id = c2.geonameid
        AND l1.sent_id = l2.sent_id 
        AND l2.mention_num = l1.mention_num + 1
        AND c1.country_code = c2.country_code
        """ 
      function: "And(linking1.is_correct, linking2.is_correct)" 
      weight: "5" 
    }
  }
}

