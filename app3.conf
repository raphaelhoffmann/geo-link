deepdive {

  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 -c 0"

  schema.variables {
    entities.is_location: Boolean
  }

  pipeline.run: debug 

  pipeline.pipelines {

    #debug = [ extract_entities ]
    #debug = [ extract_entities_lists ]
    #debug = [ extract_entities_features ] 
    #debug = [ extract_entities, extract_entities_features ] 
    debug = [ entities_context, entities_same_to_same, entities_lists ]
  }

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
    # start gpfdist server on the machine running the application with
    # `rungpcommand 'gpfdist -d /lfs/raiders4/0/rionda/greenplum_gpfdist-memex -p 9999'`
  }

  calibration.holdout_fraction: 0.075

  extraction.extractors {

   extract_preprocess: {
       style: json_extractor
       before: psql -h ${PGHOST} -p ${PGPORT} -d ${DBNAME} -f ${APP_HOME}/schemas/sentences.sql
       input: """
               SELECT id,
                 body
               FROM articles
               WHERE NOT BODY IS NULL
               ORDER BY id ASC
              """
       output_relation: sentences
       udf: ${DEEPDIVE_HOME}/examples/nlp_extractor/run.sh -k id -v body -l 100 -t 16 -a "tokenize,ssplit,pos"
   }

    extract_entities: {
        style: tsv_extractor
        before: psql -h ${PGHOST} -p ${PGPORT} -d ${DBNAME} -f ${APP_HOME}/schemas/entities.sql
        input: """
                SELECT
                        document_id, sentence_id,
                        array_to_string(words, ' '),
                        array_to_string(pos_tags, ' ')
                FROM sentences;
               """
        output_relation: entities
        udf: ${APP_HOME}/udf/extract_entities.py
    }

    extract_entities_features: {
        style: tsv_extractor
        before: psql -h ${PGHOST} -p ${PGPORT} -d ${DBNAME} -f ${APP_HOME}/schemas/entities_features.sql
        input: """
                SELECT
                        e.sentence_id, mention_num, w_from, w_to,
                        array_to_string(words, ' '),
                        array_to_string(pos_tags, ' ')
                FROM entities e, sentences s
                WHERE e.sentence_id = s.sentence_id;
                """
        output_relation: entities_features
        udf: ${APP_HOME}/udf/extract_entities_features.py
    }

    extract_entities_lists: {
        style: tsv_extractor
        before: psql -h ${PGHOST} -p ${PGPORT} -d ${DBNAME} -f ${APP_HOME}/schemas/entities_lists.sql
        input: """
                SELECT
                        document_id, sentence_id,
                        array_to_string(words, ' '),
                        array_to_string(pos_tags, ' ')
                FROM sentences;
                """
        output_relation: entities_lists
        udf: ${APP_HOME}/udf/extract_entities_lists.py
    }

  }
  
  inference.factors {

    entities_context {
      input_query = """
        SELECT e.id as "entities.id", e.is_location as "entities.is_location", unnest(f.features) as "entities.feature"
        FROM entities e, entities_features f
        WHERE e.sentence_id = f.sentence_id
        AND e.mention_num = f.mention_num;
        """
      function: "IsTrue(entities.is_location)"
      weight: "?(entities.feature)"
    }

    entities_same_to_same {
      input_query = """
        SELECT e1.id as "entities1.id", e1.is_location as "entities1.is_location", 
               e2.id as "entities2.id", e2.is_location as "entities2.is_location"
        FROM entities e1, entities e2 
        WHERE e1.document_id = e2.document_id
        AND e1.mention_str = e2.mention_str
        AND e1.mention_id != e2.mention_id
       """
      function: "And(entities1.is_location, !entities2.is_location)"
      weight: -10
    }

    entities_lists {
      input_query = """
        SELECT e1.id as "entities1.id", e1.is_location as "entities1.is_location",
               e2.id as "entities2.id", e2.is_location as "entities2.is_location"
        FROM entities e1, entities e2, entities_lists l1, entities_lists l2
        WHERE l1.list_id = l2.list_id
        AND l1.mention_num + 1 = l2.mention_num
        AND e1.sentence_id = l1.sentence_id
        AND e1.mention_num = l1.mention_num
        AND e2.sentence_id = l2.sentence_id
        AND e2.mention_num = l2.mention_num
      """
      function: "Equal(entities1.is_location, !entities2.is_location)"
      weight: -5
    }

  }
}

